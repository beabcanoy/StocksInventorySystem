const setEventListeners = () =>{
    document.getElementById("btnAdd").addEventListener("click", (e) => {
        e.preventDefault(); // prevent default behavior
        registerPurchaseOrder();
    });
}

const addPurchaseOrder = () => {
    var qty = parseInt(document.getElementById("rawmat_qty").value);
    var unit = document.getElementById("rawmat_unit").value;
    var rawmat_option = document.getElementById("rawmat_option").value;
    var rawmat_price = parseFloat(document.getElementById("rawmat_price").value);
    var tableBody = document.querySelector(".table_content");

    var newRow = document.createElement("tr");

    var qtyCell = document.createElement("td");
    qtyCell.textContent = qty;
    var unitCell = document.createElement("td");
    unitCell.textContent = unit;
    var rawmat_cell = document.createElement("td");
    var selectedOption = document.getElementById("rawmat_option").options[document.getElementById("rawmat_option").selectedIndex];
    rawmat_cell.textContent = selectedOption.text;
    rawmat_cell.setAttribute("data-rawmat-id", document.getElementById("rawmat_option").value);
    var priceCell = document.createElement("td");
    priceCell.textContent = rawmat_price;
    var amountCell = document.createElement("td");
    var amount = rawmat_price * qty;
    amountCell.textContent = amount.toFixed(2);

    var removeButton = document.createElement("button");
    removeButton.textContent = "Remove";
    removeButton.classList.add("btn", "btn-danger", "btn-sm");
    removeButton.onclick = function () {
        removeRow(newRow);
        updateTotal();
    };

    var removeCell = document.createElement("td");
    removeCell.appendChild(removeButton);

    newRow.appendChild(removeCell);
    newRow.appendChild(qtyCell);
    newRow.appendChild(unitCell);
    newRow.appendChild(rawmat_cell);
    newRow.appendChild(priceCell);
    newRow.appendChild(amountCell);
    

    tableBody.appendChild(newRow);

    document.getElementById("rawmat_qty").value = "";
    document.getElementById("rawmat_unit").value = "";
    document.getElementById("rawmat_price").value = "";

    updateTotal();
}

function removeRow(row) {
    var tableBody = document.querySelector(".table_content");
    tableBody.removeChild(row);
}

function updateTotal() {
    var tableBody = document.getElementById("po_list_table");
    var rows = tableBody.getElementsByTagName("tr");
    var subtotal = 0;

    for (var i = 0; i < rows.length; i++) {
        var cells = rows[i].getElementsByTagName("td");
        if (cells.length >= 5) {
            var amount = parseFloat(cells[5].textContent);
            subtotal += amount;
        }
    }

    var discountPercentage = parseFloat(document.getElementById("discountPercentage").value) || 0;
    var taxPercentage = parseFloat(document.getElementById("taxPercentage").value) || 0;

    discount = subtotal * (discountPercentage / 100);
    // subtotal = subtotal - discount;
    tax = subtotal * (taxPercentage / 100);
    grandtotal = subtotal - discount + tax;

    document.getElementById("subtotal").textContent = subtotal.toFixed(2);
    document.getElementById("discountValue").textContent = discount.toFixed(2);
    document.getElementById("taxValue").textContent = tax.toFixed(2);
    document.getElementById("grandtotal").textContent = grandtotal.toFixed(2);

}

const registerPurchaseOrder = () => {
    document.getElementById("blankModalTitle").innerText = "New Purchase Order";
    document.getElementById("blankModalMainDiv").innerText = "";
    document.getElementById("blankModalMainDiv2").innerText = "";

    const formData = new FormData();
    formData.append("operation","getSupplier");
    formData.append("operation","getRawMaterial");

    Promise.all([
        getSupplier(),
        getRawMaterial()
    ]).then(([supplierOptions, rawmatOptions]) => {

        var purchaseOrderForm = `
        <div class="row">
        <div class="col">
                <label for="purchase_order" class="form-label mt-2">P.O#:</label>
                <input type="text" id="purchase_order" class="form-control form-control-sm" disabled>
                <p class="text-dark fst-italic"><small>(P.O# is autogenerated).</small></p>
            </div>
            <div class="col">
                <label for="supplier_option" class="form-label mt-2">Supplier</label>
                <select class="form-select form-select-sm" id="supplier_option" aria-label="Default select example">
                <option selected>--Select supplier here--</option>
                    ${supplierOptions}
                </select>
            </div>
        </div>
        <div class="row">
            <div class="col">
                <label for="rawmat_option" class="form-label mt-1">Raw Material</label>
                <select class="form-select form-select-sm" id="rawmat_option" aria-label="Default select example">
                <option selected>--Select raw material here--</option>
                    ${rawmatOptions}
                </select>
            </div>
            <div class="col">
                <label for="rawmat_qty" class="form-label mt-1">Quantity/# of roll</label>
                <input type="text" id="rawmat_qty" class="form-control form-control-sm" autocomplete="off">
            </div>
            <div class="col">
                <label for="rawmat_unit" class="form-label mt-1">Unit</label>
                <input type="text" id="rawmat_unit" class="form-control form-control-sm" autocomplete="off">
            </div>
            <div class="col">
                <label for="rawmat_price" class="form-label mt-1">Price</label>
                <input type="text" id="rawmat_price" class="form-control form-control-sm" autocomplete="off">
            </div>
        </div>
        `;

    const btnAddPO = document.createElement("button");
    btnAddPO.innerText = "+ add to list";
    btnAddPO.classList.add("btn", "btn-primary", "mt-5", "btn-sm");
    btnAddPO.onclick = ()=>{addPurchaseOrder();};

    document.getElementById("blankModalMainDiv2").append(btnAddPO);

    const table = document.createElement("table");
    table.classList.add("table", "table-bordered" ,"table-striped", "align-middle", "mt-3");
    table.id = "po_list_table";

    const tableHeader = `
        <thead class = "table-secondary align-middle" >
            <tr>
                <th scope="col">Action</th>
                <th scope="col">Quantity/Roll</th>
                <th scope="col">Unit</th>
                <th scope="col">Raw Material</th>
                <th scope="col">Price</th>
                <th scope="col">Amount</th>
                
            </tr>
        </thead>
    `;
    table.innerHTML = tableHeader;
        
    const tableBody = document.createElement("tbody");
    tableBody.classList.add("table_content");

    table.appendChild(tableBody);

    const tableFooter = `
    <tfoot style="text-align:end">
    <tr>
        <th colspan="5">Sub total</th>
        <th id="subtotal">0</th>
    </tr>
    <tr>
        <th colspan="5">Discount<input type="number" class="ms-2 me-1" id="discountPercentage" style="width:40px !important">%</th>
        <th id="discountValue">0</th>
    </tr>
    <tr>
        <th colspan="5">Tax<input type="number" class="ms-2 me-1" id="taxPercentage" style="width:40px !important">%</th>
        <th id="taxValue">0</th>
    </tr>                              
    <tr>
        <th colspan="5">Total</th>
        <th id="grandtotal">0</th>
    </tr>
</tfoot>
    `;
    
    // Concatenate the tableFooter content with the existing table.innerHTML content
    table.innerHTML += tableFooter;

    document.getElementById("blankModalMainDiv2").appendChild(table);

    document.getElementById("discountPercentage").addEventListener("input", () => {
        updateTotal();
    });
    document.getElementById("taxPercentage").addEventListener("input", () => {
        updateTotal();
    });


    //Save purchase order part
    document.getElementById("blankModalMainDiv").innerHTML = purchaseOrderForm;

    const btnRegister = document.createElement("button");
    btnRegister.innerText = "Register";
    btnRegister.classList.add("btn", "btn-cust-citrus", "mt-3","w-100");
    btnRegister.onclick = ()=>{savePurchaseOrder();};

    document.getElementById("blankModalMainDiv2").append(btnRegister);

    const myModal = new bootstrap.Modal(document.getElementById('blankModal'), {
    keyboard: true,
    backdrop: "static"
    });
    myModal.show();
    }).catch(error => {
        alert(error);
    });

}

const savePurchaseOrder = () => {
    var table = document.getElementById("po_list_table");
    var rows = table.getElementsByTagName("tr");

    const supplier = document.getElementById("supplier_option").value;

    // Use textContent instead of value for <th> elements
    const grandtotal = parseFloat(document.getElementById("grandtotal").textContent);
    const discount_value = parseFloat(document.getElementById("discountValue").textContent);
    const discount_percentage = parseFloat(document.getElementById("discountPercentage").value);
    const tax_value = parseFloat(document.getElementById("taxValue").textContent);
    const tax_percentage = parseFloat(document.getElementById("taxPercentage").value);



    const url = 'http://localhost/StocksInventorySystem/api/purchase_order.php';


    var poTableArray = [];

    for (var i = 1; i < rows.length; i++) {
        var cells = rows[i].getElementsByTagName("td");

        if (cells.length >= 5) {
            var qtyValue = cells[1].textContent;
            var unitValue = cells[2].textContent;
            var chosenRawmat = cells[3].getAttribute("data-rawmat-id");
            var priceValue = cells[4].textContent;
            var amountValue = cells[5].textContent;
            
            

            var poItems = {
                detail_qty: qtyValue,
                detail_unit: unitValue,
                detail_rawmat: chosenRawmat,
                detail_price: priceValue,
                detail_amount: amountValue,
            };
            poTableArray.push(poItems);
        }
    }

    const json = {
        poItemsTable: poTableArray,
    };


    const formData = new FormData();
    formData.append('supplier', supplier);
    formData.append('grandtotal', grandtotal);
    formData.append('discount_value', discount_value);
    formData.append('discount_percentage', discount_percentage);
    formData.append('tax_value', tax_value);
    formData.append('tax_percentage', tax_percentage);
    formData.append("operation", "addPurchaseOrder");
    formData.append("json", JSON.stringify(json));

    axios({
        url: url,
        method: 'post',
        data: formData,
    }).then(response => {
        const status = response.data.status;
        const message = response.data.message;
        showNotificationToast(status, message);
        console.log(response.data);
        getPurchaseOrder();
    }).catch(error => {
        showNotificationModal(error);
    });

    const myModal = bootstrap.Modal.getInstance(document.getElementById('blankModal'));
    myModal.hide();
}

const getPurchaseOrder = () => {

    let message = "";
    const url = 'http://localhost/StocksInventorySystem/api/purchase_order.php';

    const formData = new FormData();
    formData.append("operation", "getPurchaseOrder");

    axios({
        url:url,
        method: "post",
        data: formData
    }).then(response =>{
        if(response.data.length === 0){
            message = "There are no records retrieved.";
            showNotificationModal(message);
        } else {
            displayPurchaseOrder(response.data);
        }
    }).catch( error =>{
        alert(error);
    });
}

const displayPurchaseOrder = (rsPurchaseOrder) => {
    const table_records = document.getElementById("table_records");
    
    var poTable = `
    <div class="table-responsive rounded-2">
    <table class="table table-bordered table-striped align-middle">
    <thead class="table-secondary align-middle">
        <tr>
            <th>Date Created</th>
            <th>PO Code</th>
            <th>Supplier</th>
            <th>Items</th>
            <th>Status</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
    `;

    rsPurchaseOrder.forEach(purchaseOrder => {
        let status = '';
        console.log(purchaseOrder);
        const purchaseOrderStatus = document.createElement("span");

        if (purchaseOrder.status == 0) {
            status = `<span class="badge bg-primary rounded-pill">Pending</span>`;
        } else {
            status = `<span class="badge bg-success rounded-pill">Received</span>`;
        }

        purchaseOrderStatus.innerHTML = status;

        // Conditionally include the "Receive" button based on the status
        const receiveButton = purchaseOrder.status != 1 ?
            `<button data-po-id="${purchaseOrder.id}" class="btnReceive btn border-0 text-secondary p-1"><i class="fa-solid fa-boxes-stacked"></i></button>` :
            '';

        poTable += `
            <tr>
                <td>${purchaseOrder.date_created}</td>
                <td>${purchaseOrder.po_code}</td>
                <td>${purchaseOrder.supplier_name}</td>
                <td>${purchaseOrder.items_count}</td>
                <td class="text-center">${purchaseOrderStatus.innerHTML}</td>
                <td class="text-center">
                    ${receiveButton}
                    <button data-po-id="${purchaseOrder.id}" id="btnView" class="btn border-0 text-info p-1"><i class="fa-solid fa-eye"></i></button>
                </td>
            </tr>
        `;
    });

    poTable += `</tbody></table></div>`;
    table_records.innerHTML = poTable;

    table_records.querySelectorAll('.btnReceive').forEach(button => {
        button.addEventListener('click', function () {
            const poId = this.getAttribute('data-po-id');
            openReceiveModal(poId);
        });
    });
};


const showNotificationToast = (status, message) => {
    const responseToastDiv = document.getElementById("responseToastDiv");
    const toast = new bootstrap.Toast(document.querySelector(".toast"));

    responseToastDiv.innerHTML = '';

    const toastIcon = document.createElement("i");

    if (status === 1) {
        toast._element.classList.add("text-white", "bg-success");
        toastIcon.classList.add("fa-solid", "fa-circle-check", "pe-2");
    } else {
        toast._element.classList.add("text-white", "bg-danger");
        toastIcon.classList.add("fa-solid", "fa-circle-xmark", "pe-2");
    }

    responseToastDiv.appendChild(toastIcon);

    const messageSpan = document.createElement("span");
    messageSpan.textContent = message;

    responseToastDiv.appendChild(messageSpan);

    toast.show();
}

const showNotificationModal = (message) =>{
    document.getElementById("responseModalMainDiv").innerHTML = message;

    const closeBtn = document.createElement("button");
    closeBtn.innerText = "Close";
    closeBtn.classList.add("btn", "text-primary", "border-0", "w-25");
    closeBtn.setAttribute("data-bs-dismiss", "modal");

    document.getElementById("responseModalMainDiv2").innerHTML = ""; // Clear previous content
    document.getElementById("responseModalMainDiv2").append(closeBtn);

    const responseNotifModal = new bootstrap.Modal(document.getElementById("responseModal"), {
        keyboard: true,
        backdrop: "static"
    });
    responseNotifModal.show();
    
}

const getSupplier = () => {

    const url = 'http://localhost/StocksInventorySystem/api/purchase_order.php';

    const formData = new FormData();
    formData.append("operation","getSupplier");

    return axios({
        url: url,
        method: 'post',
        data: formData
    }).then(response => {
        const supplierRecords = response.data;
        return supplierRecords.map(supplier =>
            `<option value="${supplier.supplier_id}">${supplier.name}</option>`).join('');
        });
}

const getRawMaterial = () => {

    const url = 'http://localhost/StocksInventorySystem/api/purchase_order.php';

    const formData = new FormData();
    formData.append("operation","getRawMaterial");

    return axios({
        url: url,
        method: 'post',
        data: formData
    }).then(response => {
        const rawmatRecords = response.data;
        return rawmatRecords.map(rawmat =>
            `<option value="${rawmat.rawmat_id}">${rawmat.name}</option>`).join('');
        });
    
}

const openReceiveModal = (poId) => {
    const formData = new FormData();
    formData.append("operation", "getPurchaseOrderDetails");
    formData.append("poId", poId);

    axios({
        url: "http://localhost/StocksInventorySystem/api/purchase_order.php",
        method: "post",
        data: formData
    })
    .then(response => {
        console.log('Server Response:', response.data);

        const { purchaseOrder, poItems } = response.data;

        if (purchaseOrder && purchaseOrder.po_code) {
            receivePurchaseOrderModal(purchaseOrder, poItems);
        } else {
            console.error('Invalid purchase order data:', purchaseOrder);
        }
    })
    .catch(error => {
        console.error('Error fetching purchase order details:', error);
    });
}

function updateTotalAgain() {
    var tableBody = document.querySelector(".received_table_content");
    var rows = tableBody.getElementsByTagName("tr");
    var subtotal = 0;

    for (var i = 0; i < rows.length; i++) {
        var cells = rows[i].getElementsByTagName("td");
        if (cells.length >= 7) {
            var receivedQuantityInput = cells[1].querySelector('.receivedQuantity');
            var rowIndex = receivedQuantityInput.getAttribute('data-row-index');
            var receivedQuantity = parseFloat(receivedQuantityInput.value) || 0; // Get received quantity from the input field
            var price = parseFloat(cells[5].textContent) || 0;
            var amount = receivedQuantity * price;
            subtotal += amount;

            // Update the Amount cell
            document.querySelector(`.amountCell[data-row-index="${rowIndex}"]`).textContent = amount.toFixed(2);
        }
    }

    var discountPercentage = parseFloat(document.getElementById("receivedDiscountPercentage").value) || 0;
    var taxPercentage = parseFloat(document.getElementById("receivedTaxPercentage").value) || 0;

    var discount = subtotal * (discountPercentage / 100);
    // subtotal = subtotal - discount;
    var tax = subtotal * (taxPercentage / 100);
    var grandtotal = subtotal + tax;

    document.getElementById("receivedSubtotal").textContent = subtotal.toFixed(2);
    document.getElementById("receivedDiscountValue").textContent = discount.toFixed(2);
    document.getElementById("receivedTaxValue").textContent = tax.toFixed(2);
    document.getElementById("receivedGrandtotal").textContent = grandtotal.toFixed(2);
}

const receivePurchaseOrderModal = (purchaseOrder, poItems) => {
    document.getElementById("receiveModalMainDiv").innerText = "";
    document.getElementById("receiveModalMainDiv2").innerText = "";
    console.log('Purchase Order:', purchaseOrder);
    console.log('PO Items:', poItems);

    // Update modal title
    document.getElementById('receiveModalTitle').innerText = `Receive Order from ${purchaseOrder.po_code}`;

    // Update modal body with Purchase Order details
    const poDetailsHtml = `
        <div class="row">
            <div class="col">
                <label for="purchase_order_text" class="form-label mt-2">P.O. Code</label>
                <input type="text" id="purchase_order_text" class="form-control form-control-sm" value="${purchaseOrder.po_code}" disabled>
                <input type="hidden" id="received_purchase_order" class="form-control form-control-sm" value="${purchaseOrder.id}">
            </div>
            <div class="col">
            <label for="received_supplier_option" class="form-label mt-2">Supplier</label>
            <select class="form-select form-select-sm" id="received_supplier_option" aria-label="Default select example" disabled>
            <option selected value="${purchaseOrder.supplier_id}">${purchaseOrder.supplier_name}</option>
            </select>
            </div>
        </div>
    `;
    document.getElementById('receiveModalMainDiv').innerHTML = poDetailsHtml;

    // Create a table to display Purchase Order items
    const poItemsTable = document.createElement('table');
    poItemsTable.classList.add('table', 'table-bordered', 'table-striped', 'align-middle', 'mt-5');
    poItemsTable.id = "receive_list_table";

    // Create table header
    const poItemsTableHeader = `
        <thead class="table-secondary align-middle">
            <tr>
                <th scope="col">Action</th>
                <th scope="col">Quantity/Roll</th>
                <th scope="col">Unit</th>
                <th scope="col">Raw Material</th>
                <th scope="col">Actual netweight</th>
                <th scope="col">Price</th>
                <th scope="col">Amount</th>
            </tr>
        </thead>
    `;
    poItemsTable.innerHTML = poItemsTableHeader;

    // Create table body
    const poItemsTableBody = document.createElement('tbody');
    poItemsTableBody.classList.add('received_table_content');

    let calculatedSubtotal = 0;

    poItems.forEach((poItem, index) => {
        // Convert the price and quantity to cents (or smallest currency unit)
        const itemTotalCents = Math.round(poItem.quantity * poItem.price * 100);
        
        calculatedSubtotal += itemTotalCents;
        
            const poItemRow = `
                <tr>
                    <td><button class="btn btn-danger btn-sm delete-button">Delete</button></td>
                    <td class="receivedQty">
                    <input type="number" class="form-control form-control-sm" style="width:100px !important" value="${poItem.quantity}" max="${poItem.quantity}" min="0"></td>
                    <td>${poItem.unit}</td>
                    <td data-rawmat-id="${poItem.rawmat_id}">${poItem.rawmat_name}</td>
                    <td class="actualNetweight">
                        <input type="number" class="form-control form-control-sm" style="width:100px !important" id="netweightInput" min="0">
                        <span id="error-message" style="color: red;"></span>
                    </td>
                    <td>${poItem.price}</td>
                    <td class="amountCell" data-row-index="${index}">${itemTotalCents / 100}</td>
                </tr>
            `;
            poItemsTableBody.innerHTML += poItemRow;
        });
    
    const formattedSubtotal = calculatedSubtotal / 100;

    poItemsTable.appendChild(poItemsTableBody);
    
    document.getElementById('receiveModalMainDiv').appendChild(poItemsTable);
    
    const tableFooter = `
        <tfoot style="text-align:end">
            <tr>
                <th colspan="6">Sub total</th>
                <th id="receivedSubtotal">${formattedSubtotal - purchaseOrder.discount}</th>
            </tr>
            <tr>
                <th colspan="6">Discount<input type="number" class="ms-2 me-1" id="received_discount_percentage" style="width:40px !important" value="${purchaseOrder.discount_percent}" min=0>%</th>
                <th id="received_discount">${purchaseOrder.discount}</th>
            </tr>
            <tr>
                <th colspan="6">Tax<input type="number" class="ms-2 me-1" id="received_tax_percentage" style="width:40px !important" value="${purchaseOrder.tax_percent}" min=0>%</th>
                <th id="received_tax_value">${purchaseOrder.tax}</th>
            </tr>                              
            <tr>
                <th colspan="6">Total</th>
                <th id="received_grand_total">${purchaseOrder.amount}</th>
            </tr>
        </tfoot>
    `;

poItemsTable.addEventListener('click', function (event) {
    if (event.target.classList.contains('delete-button')) {
        const row = event.target.closest('tr');

        const rowIndex = row.querySelector('.receivedQuantity').dataset.rowIndex;

        calculatedSubtotal -= poItems[rowIndex].total;

        row.remove();

        updateTotalAgain();
    }
});

    
    poItemsTable.innerHTML += tableFooter;
    document.querySelectorAll(".receivedQuantity").forEach((quantityInput) => {
        quantityInput.addEventListener("input", () => {
            updateTotalAgain();
        });
    });

    document.getElementById("received_discount_percentage").addEventListener("input", () => {
        updateTotalAgain();
    });
    document.getElementById("received_tax_percentage").addEventListener("input", () => {
        updateTotalAgain();
    });

    const btnRegisterPO = document.createElement("button");
    btnRegisterPO.innerText = "Register purchase order";
    btnRegisterPO.classList.add("btn", "btn-cust-citrus", "mt-3","w-100");
    btnRegisterPO.onclick = ()=>{saveReceivedPO();};

    document.getElementById("receiveModalMainDiv2").append(btnRegisterPO);



    const myModal = new bootstrap.Modal(document.getElementById('receiveModal'), {
        keyboard: true,
        backdrop: "static"
    });
    myModal.show();
}

const saveReceivedPO = () => {
    var table = document.getElementById("receive_list_table");
    var rows = table.getElementsByTagName("tr");

    const received_purchase_order = document.getElementById("received_purchase_order").value;
    // const received_supplier_option = document.getElementById("received_supplier_option").value;
    // const received_grand_total = parseFloat(document.getElementById("received_grand_total").textContent);
    // const received_discount = parseFloat(document.getElementById("received_discount").textContent);
    // const received_discount_percentage = parseFloat(document.getElementById("received_discount_percentage").value);
    // const received_tax_value = parseFloat(document.getElementById("received_tax_value").textContent);
    // const received_tax_percentage = parseFloat(document.getElementById("received_tax_percentage").value);


    const url = 'http://localhost/StocksInventorySystem/api/purchase_order.php';


    var receivedPoTable = [];

    for (var i = 1; i < rows.length; i++) {
        var cells = rows[i].getElementsByTagName("td");

        if (cells.length >= 6) {
            // Extract values from the cells receivedQty
            const receivedQtyValue = parseFloat(cells[1].querySelector('.receivedQty input').value);
            const receivedUnitValue = cells[2].textContent.trim();
            const receivedRawmatId = cells[3].getAttribute('data-rawmat-id');
            const rawmatNetweight = parseFloat(cells[4].querySelector('.actualNetweight input').value);
            const receivedPriceValue = cells[5].textContent.trim();
            const receivedAmountValue = cells[6].textContent.trim();
            
            var receivedPoItems = {
                received_qty: receivedQtyValue,
                received_unit: receivedUnitValue,
                received_rawmat: receivedRawmatId,
                rawmat_netweight: rawmatNetweight,
                received_price: receivedPriceValue,
                received_amount: receivedAmountValue,
            };
            receivedPoTable.push(receivedPoItems);
        }
    }

    const json = {
        receivedPoItemsTable: receivedPoTable,
    };


    const formData = new FormData();
    formData.append('received_purchase_order', received_purchase_order);
    // formData.append('received_supplier_option', received_supplier_option);
    // formData.append('received_grand_total', received_grand_total);
    // formData.append('received_discount', received_discount);
    // formData.append('received_discount_percentage', received_discount_percentage);
    // formData.append('received_tax_value', received_tax_value);
    // formData.append('received_tax_percentage', received_tax_percentage);
    formData.append("operation", "savePurchaseOrder");
    formData.append("json", JSON.stringify(json));

    axios({
        url: url,
        method: 'post',
        data: formData,
    }).then(response => {
        console.log(response.body);
        const status = response.data.status;
        const message = response.data.message;
        showNotificationToast(status, message);
        getPurchaseOrder();
    }).catch(error => {
        showNotificationModal(error);
    });

    const myModal = bootstrap.Modal.getInstance(document.getElementById('receiveModal'));
    myModal.hide();
}

setEventListeners();
getPurchaseOrder();